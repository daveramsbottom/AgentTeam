{
  "info": {
    "name": "FastAPI CRUD Tests",
    "description": "Test suite for Workflow Admin FastAPI CRUD endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "project_id",
      "value": ""
    },
    {
      "key": "agent_type_id", 
      "value": ""
    },
    {
      "key": "agent_id",
      "value": ""
    },
    {
      "key": "team_id",
      "value": ""
    },
    {
      "key": "workflow_id",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('‚úÖ Health check returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('‚úÖ Health check response format', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('status');",
              "    pm.expect(response).to.have.property('database');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "Create Project",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('‚úÖ Project created successfully', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('‚úÖ Project response format', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.collectionVariables.set('project_id', response.id);",
              "    console.log('üìù Created project ID:', response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "{{content_type}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/projects",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "projects"]
        }
      }
    },
    {
      "name": "Get Projects",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('‚úÖ Get projects returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('‚úÖ Pagination response format', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('items');",
              "    pm.expect(response).to.have.property('total');",
              "    pm.expect(response).to.have.property('page');",
              "    pm.expect(response.items).to.be.an('array');",
              "    pm.expect(response.total).to.be.at.least(1);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/v1/projects?skip=0&limit=10",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "projects"],
          "query": [
            {
              "key": "skip",
              "value": "0"
            },
            {
              "key": "limit", 
              "value": "10"
            }
          ]
        }
      }
    },
    {
      "name": "Create Agent Type",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('‚úÖ Agent type created successfully', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('‚úÖ Agent type response format', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.collectionVariables.set('agent_type_id', response.id);",
              "    console.log('ü§ñ Created agent type ID:', response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "{{content_type}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/agents/types",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "agents", "types"]
        }
      }
    },
    {
      "name": "Create Agent",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('‚úÖ Agent created successfully', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('‚úÖ Agent response format', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.expect(response).to.have.property('agent_type_id');",
              "    pm.collectionVariables.set('agent_id', response.id);",
              "    console.log('ü§ñ Created agent ID:', response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "{{content_type}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/agents",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "agents"]
        }
      }
    },
    {
      "name": "Create Team",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('‚úÖ Team created successfully', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('‚úÖ Team response format', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.collectionVariables.set('team_id', response.id);",
              "    console.log('üë• Created team ID:', response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "{{content_type}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/teams",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "teams"]
        }
      }
    },
    {
      "name": "Create Workflow",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('‚úÖ Workflow created successfully', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('‚úÖ Workflow response format', function () {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.expect(response).to.have.property('definition');",
              "    pm.collectionVariables.set('workflow_id', response.id);",
              "    console.log('‚ö° Created workflow ID:', response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "{{content_type}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/v1/workflows",
          "host": ["{{base_url}}"],
          "path": ["api", "v1", "workflows"]
        }
      }
    },
    {
      "name": "Get API Documentation",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('‚úÖ API documentation accessible', function () {",
              "    pm.response.to.have.status(200);",
              "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
              "});",
              "",
              "console.log('üìö FastAPI documentation is available at /docs');"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/docs",
          "host": ["{{base_url}}"],
          "path": ["docs"]
        }
      }
    }
  ]
}