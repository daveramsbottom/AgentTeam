{
  "collection": {
    "item": [
      {
        "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
        "name": "Health Check",
        "request": {
          "url": {
            "path": [
              "health"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Health check returns 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Health check response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('status');",
                "    pm.expect(response).to.have.property('database');",
                "});"
              ],
              "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
            }
          }
        ]
      },
      {
        "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
        "name": "Create Project",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "projects"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Project created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Project response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('project_id', response.id);",
                "    console.log('üìù Created project ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
            }
          }
        ]
      },
      {
        "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
        "name": "Get Projects",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "projects"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "skip",
                "value": "0"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Get projects returns 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Pagination response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('items');",
                "    pm.expect(response).to.have.property('total');",
                "    pm.expect(response).to.have.property('page');",
                "    pm.expect(response.items).to.be.an('array');",
                "    pm.expect(response.total).to.be.at.least(1);",
                "});"
              ],
              "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
            }
          }
        ]
      },
      {
        "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
        "name": "Create Agent Type",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "agents",
              "types"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3e054426-d915-466e-80df-8f7ee36602bb",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Agent type created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Agent type response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('agent_type_id', response.id);",
                "    console.log('ü§ñ Created agent type ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
            }
          }
        ]
      },
      {
        "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
        "name": "Create Agent",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "agents"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Agent created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Agent response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.expect(response).to.have.property('agent_type_id');",
                "    pm.collectionVariables.set('agent_id', response.id);",
                "    console.log('ü§ñ Created agent ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
            }
          }
        ]
      },
      {
        "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
        "name": "Create Team",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "teams"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Team created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Team response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('team_id', response.id);",
                "    console.log('üë• Created team ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
            }
          }
        ]
      },
      {
        "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
        "name": "Create Workflow",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "workflows"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Workflow created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Workflow response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.expect(response).to.have.property('definition');",
                "    pm.collectionVariables.set('workflow_id', response.id);",
                "    console.log('‚ö° Created workflow ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
            }
          }
        ]
      },
      {
        "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
        "name": "Get API Documentation",
        "request": {
          "url": {
            "path": [
              "docs"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ API documentation accessible', function () {",
                "    pm.response.to.have.status(200);",
                "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                "});",
                "",
                "console.log('üìö FastAPI documentation is available at /docs');"
              ],
              "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "noauth",
      "noauth": []
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
          "type": "text/javascript",
          "exec": [
            "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
          ],
          "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "project_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "agent_type_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "agent_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "team_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "workflow_id"
      }
    ],
    "info": {
      "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
      "name": "FastAPI CRUD Tests",
      "version": {
        "raw": "1.0.0",
        "major": 1,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "docker-env",
    "name": "Docker Development",
    "values": [
      {
        "type": "any",
        "value": "http://backend:8000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "v1",
        "key": "api_version"
      },
      {
        "type": "any",
        "value": "5000",
        "key": "timeout"
      },
      {
        "type": "any",
        "value": "application/json",
        "key": "content_type"
      },
      {
        "type": "any",
        "value": "",
        "key": "auth_token"
      }
    ]
  },
  "globals": {
    "id": "eab3d19c-4c22-4618-af11-3529a99e5dd7",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 15,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 18.875,
      "responseMin": 4,
      "responseMax": 48,
      "responseSd": 14.012828943507445,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756660495225,
      "completed": 1756660499719
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a8e1cfad-04a4-45fe-9931-071c465e9b98",
          "httpRequestId": "0d921e35-9688-4178-9543-f281b4fc44eb"
        },
        "item": {
          "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Health check response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('database');",
                  "});"
                ],
                "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "health"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b0d1ac8d-91ea-4f66-afc2-7cbc9f1ca6fe",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "9745dce7-fd38-406d-a13e-26ebf461896f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:14:55 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "109"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              58,
              123,
              34,
              108,
              111,
              99,
              97,
              108,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              111,
              107,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              45,
              97,
              100,
              109,
              105,
              110,
              45,
              97,
              112,
              105,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 48,
          "responseSize": 109
        },
        "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
        "assertions": [
          {
            "assertion": "‚úÖ Health check returns 200",
            "skipped": false
          },
          {
            "assertion": "‚úÖ Health check response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4fba959d-0ba3-4d19-86b5-79cdd20d949d",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "19ec47d4-d728-4b82-b4f6-9fd6c2b80937"
        },
        "item": {
          "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
          "name": "Create Project",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "projects"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Project created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Project response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('project_id', response.id);",
                  "    console.log('üìù Created project ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "projects"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "619415cc-3ed4-4af0-b586-8a2deec36699",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "153",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "dfc2f92a-c6ba-4a42-9266-71e372b83ffa",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:14:55 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "185"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              52,
              58,
              53,
              54,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              53,
              125
            ]
          },
          "cookie": [],
          "responseTime": 36,
          "responseSize": 185
        },
        "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
        "assertions": [
          {
            "assertion": "‚úÖ Project created successfully",
            "skipped": false
          },
          {
            "assertion": "‚úÖ Project response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "644c0155-6be1-46f7-a31c-ec803187cc68",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5531913e-ddbf-47d5-8f1a-bf01b824013e"
        },
        "item": {
          "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
          "name": "Get Projects",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "projects"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Get projects returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Pagination response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('items');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.expect(response.total).to.be.at.least(1);",
                  "});"
                ],
                "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "projects"
            ],
            "host": [
              "backend"
            ],
            "query": [
              {
                "key": "skip",
                "value": "0"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2c781a91-156e-4acb-a4c2-9ca4fee35681",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "ce8e9698-b010-4352-ba69-8e4d51b0c859",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:14:56 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "931"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              50,
              57,
              58,
              51,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              51,
              52,
              58,
              49,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              50,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              48,
              56,
              58,
              49,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              51,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              48,
              57,
              58,
              50,
              57,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              52,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              52,
              58,
              53,
              54,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              53,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 15,
          "responseSize": 931
        },
        "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
        "assertions": [
          {
            "assertion": "‚úÖ Get projects returns 200",
            "skipped": false
          },
          {
            "assertion": "‚úÖ Pagination response format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "‚úÖ Pagination response format",
              "message": "expected [ { ‚Ä¶(6) }, { ‚Ä¶(6) }, { ‚Ä¶(6) }, ‚Ä¶(2) ] to have property 'items'",
              "stack": "AssertionError: expected [ { ‚Ä¶(6) }, { ‚Ä¶(6) }, { ‚Ä¶(6) }, ‚Ä¶(2) ] to have property 'items'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0d58bf3d-7dfc-46f6-9917-ad46a8b44dbd",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c12421b-979b-4592-8d4a-04aca447e88d"
        },
        "item": {
          "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
          "name": "Create Agent Type",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents",
                "types"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent type created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent type response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('agent_type_id', response.id);",
                  "    console.log('ü§ñ Created agent type ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "agents",
              "types"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bfe0c542-883a-42b2-8dc8-d92b94d3e9cb",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "501",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "091cc857-6394-424a-8571-29c2360a4f1b",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:14:56 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "21"
            },
            {
              "key": "content-type",
              "value": "text/plain; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              32,
              69,
              114,
              114,
              111,
              114
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 21
        },
        "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
        "assertions": [
          {
            "assertion": "‚úÖ Agent type created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "‚úÖ Agent type created successfully",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "‚úÖ Agent type response format",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "‚úÖ Agent type response format",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2e8d757f-dd53-43fd-9e2b-321fd089883b",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2e7efecb-3110-4eb2-b98c-8b8b8b48b266"
        },
        "item": {
          "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
          "name": "Create Agent",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('agent_type_id');",
                  "    pm.collectionVariables.set('agent_id', response.id);",
                  "    console.log('ü§ñ Created agent ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "agents"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f53ecea4-f55a-47f6-9e89-fe23b99f5cff",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "509",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": ,\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "7e4cb03d-c755-43eb-9dea-5ff26456c191",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:14:57 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "125"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              52,
              51,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 125
        },
        "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
        "assertions": [
          {
            "assertion": "‚úÖ Agent created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "‚úÖ Agent created successfully",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "‚úÖ Agent response format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "‚úÖ Agent response format",
              "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
              "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9caa7fd4-8c08-486d-966a-7289f488fa19",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3aa7653c-ead3-4c02-ab03-7087522a92b4"
        },
        "item": {
          "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
          "name": "Create Team",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "teams"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Team created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Team response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('team_id', response.id);",
                  "    console.log('üë• Created team ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "teams"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "27ea3b59-3016-4456-b754-ee83cb3712ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "258",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": 5,\n  \"team_lead_id\": ,\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "9ca33871-faa9-46c3-afbd-faa70606acdd",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:14:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "126"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              52,
              49,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 126
        },
        "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
        "assertions": [
          {
            "assertion": "‚úÖ Team created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "‚úÖ Team created successfully",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "‚úÖ Team response format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "‚úÖ Team response format",
              "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
              "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "534197d6-f7e1-443c-b452-5f7ed8e177bd",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "450dbe69-3678-4072-a274-6f19c1e7a472"
        },
        "item": {
          "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('‚ö° Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "workflows"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d2436a6b-1ede-4c75-b257-08ff7764b113",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "1076",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": 5,\n  \"assigned_team_id\": ,\n  \"primary_agent_id\": ,\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "d0eaaf08-4de1-4d6c-a53e-008440cfeff1",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:14:58 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "126"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              55,
              54,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 126
        },
        "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
        "assertions": [
          {
            "assertion": "‚úÖ Workflow created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "‚úÖ Workflow created successfully",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "‚úÖ Workflow response format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "‚úÖ Workflow response format",
              "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
              "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "688cbe8d-d2e3-4f45-b96f-13a4df7d2110",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ded21ccc-2236-4e29-8584-09daa0a176f6"
        },
        "item": {
          "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
          "name": "Get API Documentation",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ API documentation accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                  "});",
                  "",
                  "console.log('üìö FastAPI documentation is available at /docs');"
                ],
                "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "docs"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b97b8acc-a120-46cd-ab75-5cd39c2db7d0",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "416e1bd2-e484-49d5-995f-790cab7d7aa3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:14:59 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "950"
            },
            {
              "key": "content-type",
              "value": "text/html; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              10,
              32,
              32,
              32,
              32,
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              108,
              105,
              110,
              107,
              32,
              116,
              121,
              112,
              101,
              61,
              34,
              116,
              101,
              120,
              116,
              47,
              99,
              115,
              115,
              34,
              32,
              114,
              101,
              108,
              61,
              34,
              115,
              116,
              121,
              108,
              101,
              115,
              104,
              101,
              101,
              116,
              34,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              99,
              100,
              110,
              46,
              106,
              115,
              100,
              101,
              108,
              105,
              118,
              114,
              46,
              110,
              101,
              116,
              47,
              110,
              112,
              109,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              100,
              105,
              115,
              116,
              64,
              53,
              46,
              57,
              46,
              48,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              46,
              99,
              115,
              115,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              108,
              105,
              110,
              107,
              32,
              114,
              101,
              108,
              61,
              34,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              32,
              105,
              99,
              111,
              110,
              34,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              102,
              97,
              115,
              116,
              97,
              112,
              105,
              46,
              116,
              105,
              97,
              110,
              103,
              111,
              108,
              111,
              46,
              99,
              111,
              109,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              118,
              105,
              99,
              111,
              110,
              46,
              112,
              110,
              103,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              32,
              65,
              100,
              109,
              105,
              110,
              32,
              65,
              80,
              73,
              32,
              45,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              85,
              73,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              100,
              105,
              118,
              32,
              105,
              100,
              61,
              34,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              100,
              105,
              118,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              115,
              99,
              114,
              105,
              112,
              116,
              32,
              115,
              114,
              99,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              99,
              100,
              110,
              46,
              106,
              115,
              100,
              101,
              108,
              105,
              118,
              114,
              46,
              110,
              101,
              116,
              47,
              110,
              112,
              109,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              100,
              105,
              115,
              116,
              64,
              53,
              46,
              57,
              46,
              48,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              106,
              115,
              34,
              62,
              60,
              47,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              33,
              45,
              45,
              32,
              96,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              96,
              32,
              105,
              115,
              32,
              110,
              111,
              119,
              32,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              103,
              101,
              32,
              45,
              45,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              116,
              32,
              117,
              105,
              32,
              61,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              117,
              114,
              108,
              58,
              32,
              39,
              47,
              111,
              112,
              101,
              110,
              97,
              112,
              105,
              46,
              106,
              115,
              111,
              110,
              39,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              111,
              109,
              95,
              105,
              100,
              34,
              58,
              32,
              34,
              35,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              34,
              44,
              10,
              34,
              108,
              97,
              121,
              111,
              117,
              116,
              34,
              58,
              32,
              34,
              66,
              97,
              115,
              101,
              76,
              97,
              121,
              111,
              117,
              116,
              34,
              44,
              10,
              34,
              100,
              101,
              101,
              112,
              76,
              105,
              110,
              107,
              105,
              110,
              103,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              34,
              115,
              104,
              111,
              119,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              34,
              115,
              104,
              111,
              119,
              67,
              111,
              109,
              109,
              111,
              110,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              111,
              97,
              117,
              116,
              104,
              50,
              82,
              101,
              100,
              105,
              114,
              101,
              99,
              116,
              85,
              114,
              108,
              58,
              32,
              119,
              105,
              110,
              100,
              111,
              119,
              46,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              111,
              114,
              105,
              103,
              105,
              110,
              32,
              43,
              32,
              39,
              47,
              100,
              111,
              99,
              115,
              47,
              111,
              97,
              117,
              116,
              104,
              50,
              45,
              114,
              101,
              100,
              105,
              114,
              101,
              99,
              116,
              39,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              114,
              101,
              115,
              101,
              116,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              112,
              114,
              101,
              115,
              101,
              116,
              115,
              46,
              97,
              112,
              105,
              115,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              83,
              116,
              97,
              110,
              100,
              97,
              108,
              111,
              110,
              101,
              80,
              114,
              101,
              115,
              101,
              116,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              41,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 950
        },
        "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
        "assertions": [
          {
            "assertion": "‚úÖ API documentation accessible",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2573
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "‚úÖ Pagination response format",
          "message": "expected [ { ‚Ä¶(6) }, { ‚Ä¶(6) }, { ‚Ä¶(6) }, ‚Ä¶(2) ] to have property 'items'",
          "stack": "AssertionError: expected [ { ‚Ä¶(6) }, { ‚Ä¶(6) }, { ‚Ä¶(6) }, ‚Ä¶(2) ] to have property 'items'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "37a8ce3fd32092ba0eb9107f77bcac64",
          "id": "94f24f65-85c9-4893-8aaf-0711e0a2c2ce",
          "timestamp": 1756660496962,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
          "name": "Get Projects",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "projects"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Get projects returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Pagination response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('items');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.expect(response.total).to.be.at.least(1);",
                  "});"
                ],
                "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "644c0155-6be1-46f7-a31c-ec803187cc68",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5531913e-ddbf-47d5-8f1a-bf01b824013e",
          "scriptId": "c394cc19-e349-4f4e-9d09-78fc9336464c",
          "execution": "a7e55f7e-c039-49be-9131-2ecab1f97072"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "‚úÖ Agent type created successfully",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "241f387046ee8ddb4bb32e02730d2d99",
          "id": "1eac18a6-09bf-4d47-a893-bd95062d47d6",
          "timestamp": 1756660497506,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
          "name": "Create Agent Type",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents",
                "types"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent type created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent type response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('agent_type_id', response.id);",
                  "    console.log('ü§ñ Created agent type ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "0d58bf3d-7dfc-46f6-9917-ad46a8b44dbd",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c12421b-979b-4592-8d4a-04aca447e88d",
          "scriptId": "3e054426-d915-466e-80df-8f7ee36602bb",
          "execution": "40eca98b-00da-4a04-a338-90958407e01e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "‚úÖ Agent type response format",
          "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
          "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "8c178e5b3521c9d2297760911a9a5266",
          "id": "8031a89d-d5ba-46d3-8aa2-1b0118ba407f",
          "timestamp": 1756660497507,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
          "name": "Create Agent Type",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents",
                "types"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent type created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent type response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('agent_type_id', response.id);",
                  "    console.log('ü§ñ Created agent type ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "0d58bf3d-7dfc-46f6-9917-ad46a8b44dbd",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8c12421b-979b-4592-8d4a-04aca447e88d",
          "scriptId": "3e054426-d915-466e-80df-8f7ee36602bb",
          "execution": "40eca98b-00da-4a04-a338-90958407e01e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "‚úÖ Agent created successfully",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "dc76a7a7800eb98cd1cca1002f4a5504",
          "id": "7a350a64-0ea4-421a-8e4c-7f3cd3474a12",
          "timestamp": 1756660498059,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
          "name": "Create Agent",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('agent_type_id');",
                  "    pm.collectionVariables.set('agent_id', response.id);",
                  "    console.log('ü§ñ Created agent ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2e8d757f-dd53-43fd-9e2b-321fd089883b",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2e7efecb-3110-4eb2-b98c-8b8b8b48b266",
          "scriptId": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
          "execution": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "‚úÖ Agent response format",
          "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
          "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "068762cb357563157ac357f05d657e7a",
          "id": "e98f9026-3971-4480-98f2-77554f918e08",
          "timestamp": 1756660498060,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
          "name": "Create Agent",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('agent_type_id');",
                  "    pm.collectionVariables.set('agent_id', response.id);",
                  "    console.log('ü§ñ Created agent ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2e8d757f-dd53-43fd-9e2b-321fd089883b",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2e7efecb-3110-4eb2-b98c-8b8b8b48b266",
          "scriptId": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
          "execution": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "‚úÖ Team created successfully",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "152fc67592526f7203bf6132e408f46d",
          "id": "93f5a3ac-d439-4446-9577-60709c1491b7",
          "timestamp": 1756660498620,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
          "name": "Create Team",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "teams"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Team created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Team response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('team_id', response.id);",
                  "    console.log('üë• Created team ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "9caa7fd4-8c08-486d-966a-7289f488fa19",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3aa7653c-ead3-4c02-ab03-7087522a92b4",
          "scriptId": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
          "execution": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "‚úÖ Team response format",
          "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
          "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "4023ee941d4e3b7948f160840a973202",
          "id": "6cf58f9e-de75-4d22-8efa-8b8bc0426ebe",
          "timestamp": 1756660498621,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
          "name": "Create Team",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "teams"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Team created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Team response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('team_id', response.id);",
                  "    console.log('üë• Created team ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "9caa7fd4-8c08-486d-966a-7289f488fa19",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3aa7653c-ead3-4c02-ab03-7087522a92b4",
          "scriptId": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
          "execution": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "‚úÖ Workflow created successfully",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "0ab10182b4beb313f556c28c03e97dec",
          "id": "c7cf9c91-648d-4c3e-a20f-7b7d43316016",
          "timestamp": 1756660499179,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('‚ö° Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "534197d6-f7e1-443c-b452-5f7ed8e177bd",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "450dbe69-3678-4072-a274-6f19c1e7a472",
          "scriptId": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
          "execution": "375593c3-5dc3-4af9-a976-65c6adef0721"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "‚úÖ Workflow response format",
          "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
          "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "addb4758d88473aba86497ef31f4f07a",
          "id": "06e8a222-e2cf-4479-a871-3b3282b9e0e0",
          "timestamp": 1756660499181,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('‚ö° Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "1d13be71-95b8-426b-b7ea-6746c883907b",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1ca77530-bca8-44f5-ae18-ae774628e205",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "945bdf79-e19b-4f3e-b515-ea0962808ceb"
                  }
                }
              ]
            },
            {
              "id": "2e0a98d2-a1e8-40cb-b1ec-f610d5d44400",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13ce1fc5-da6e-44b0-8923-f1532f9bee34",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "bf6fcc52-173c-4caa-ba99-47deec426dda"
                  }
                }
              ]
            },
            {
              "id": "91db237a-b628-4630-baf0-ef31d5adbbcb",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c394cc19-e349-4f4e-9d09-78fc9336464c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "a7e55f7e-c039-49be-9131-2ecab1f97072"
                  }
                }
              ]
            },
            {
              "id": "063fe6c5-3acb-44b0-b887-01cca9c5f493",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e054426-d915-466e-80df-8f7ee36602bb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "40eca98b-00da-4a04-a338-90958407e01e"
                  }
                }
              ]
            },
            {
              "id": "114ddf8f-60ec-48c7-8047-563e9ceb1b6d",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "56219c2e-bad4-4e7e-8bcc-81a88f6caf5f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "63ed17e6-ff59-4bb7-8607-57478c6b60cb"
                  }
                }
              ]
            },
            {
              "id": "ecec4490-6eef-47ee-a94c-902bc4790233",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db89418b-6c0c-4f11-872a-51ea4d6bcc33",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "6ccab729-83cb-4bbd-bcfa-65b44d7bb3e8"
                  }
                }
              ]
            },
            {
              "id": "2f1cce1d-b105-4641-936e-65bd523f8df1",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "375593c3-5dc3-4af9-a976-65c6adef0721"
                  }
                }
              ]
            },
            {
              "id": "53f25ac6-6895-43ae-b7e8-e978b3141bf3",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39a08d54-af48-47e9-b1e8-3f4ab61be7dd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "b8bf4cd1-eb15-4491-9ea6-33a30a08ee82"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7839c09c-de7b-4032-99da-5eda3f0aff83",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "d8435802-3d3b-438b-9bab-bc5797df662b"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "d7210bc9-a0ac-40b7-a228-8e3f4c05bc95",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "534197d6-f7e1-443c-b452-5f7ed8e177bd",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "450dbe69-3678-4072-a274-6f19c1e7a472",
          "scriptId": "f20f1bac-4156-41ad-ba8d-ca477ef4901f",
          "execution": "375593c3-5dc3-4af9-a976-65c6adef0721"
        }
      }
    ],
    "error": null
  }
}