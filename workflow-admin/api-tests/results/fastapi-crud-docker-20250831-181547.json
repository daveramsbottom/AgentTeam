{
  "collection": {
    "item": [
      {
        "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
        "name": "Health Check",
        "request": {
          "url": {
            "path": [
              "health"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Health check returns 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Health check response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('status');",
                "    pm.expect(response).to.have.property('database');",
                "});"
              ],
              "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
            }
          }
        ]
      },
      {
        "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
        "name": "Create Project",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "projects"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Project created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Project response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('project_id', response.id);",
                "    console.log('üìù Created project ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
            }
          }
        ]
      },
      {
        "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
        "name": "Get Projects",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "projects"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "skip",
                "value": "0"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Get projects returns 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Pagination response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('items');",
                "    pm.expect(response).to.have.property('total');",
                "    pm.expect(response).to.have.property('page');",
                "    pm.expect(response.items).to.be.an('array');",
                "    pm.expect(response.total).to.be.at.least(1);",
                "});"
              ],
              "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
            }
          }
        ]
      },
      {
        "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
        "name": "Create Agent Type",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "agents",
              "types"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Agent type created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Agent type response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('agent_type_id', response.id);",
                "    console.log('ü§ñ Created agent type ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
            }
          }
        ]
      },
      {
        "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
        "name": "Create Agent",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "agents"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Agent created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Agent response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.expect(response).to.have.property('agent_type_id');",
                "    pm.collectionVariables.set('agent_id', response.id);",
                "    console.log('ü§ñ Created agent ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
            }
          }
        ]
      },
      {
        "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
        "name": "Create Team",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "teams"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Team created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Team response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('team_id', response.id);",
                "    console.log('üë• Created team ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
            }
          }
        ]
      },
      {
        "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
        "name": "Create Workflow",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "workflows"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ Workflow created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('‚úÖ Workflow response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.expect(response).to.have.property('definition');",
                "    pm.collectionVariables.set('workflow_id', response.id);",
                "    console.log('‚ö° Created workflow ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
            }
          }
        ]
      },
      {
        "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
        "name": "Get API Documentation",
        "request": {
          "url": {
            "path": [
              "docs"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
              "type": "text/javascript",
              "exec": [
                "pm.test('‚úÖ API documentation accessible', function () {",
                "    pm.response.to.have.status(200);",
                "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                "});",
                "",
                "console.log('üìö FastAPI documentation is available at /docs');"
              ],
              "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "noauth",
      "noauth": []
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
          "type": "text/javascript",
          "exec": [
            "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
          ],
          "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "project_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "agent_type_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "agent_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "team_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "workflow_id"
      }
    ],
    "info": {
      "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
      "name": "FastAPI CRUD Tests",
      "version": {
        "raw": "1.0.0",
        "major": 1,
        "minor": 0,
        "patch": 0,
        "prerelease": [],
        "build": [],
        "string": "1.0.0"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "docker-env",
    "name": "Docker Development",
    "values": [
      {
        "type": "any",
        "value": "http://backend:8000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "v1",
        "key": "api_version"
      },
      {
        "type": "any",
        "value": "5000",
        "key": "timeout"
      },
      {
        "type": "any",
        "value": "application/json",
        "key": "content_type"
      },
      {
        "type": "any",
        "value": "",
        "key": "auth_token"
      }
    ]
  },
  "globals": {
    "id": "68fd8162-293f-4f56-ae4e-f0c443591c2d",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 15,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 18,
      "responseMin": 9,
      "responseMax": 46,
      "responseSd": 12.124355652982139,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756660553690,
      "completed": 1756660558198
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f9264e0b-8606-461c-8c8c-8aad1df23d60",
          "httpRequestId": "9e7d08c7-65ea-4624-b713-9e0c66aca6e0"
        },
        "item": {
          "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Health check response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('database');",
                  "});"
                ],
                "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "health"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de8812f5-af8c-46a9-b504-ba33d0d9f642",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "59b6bb32-218b-4b11-85df-1fbb07e228f9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:15:53 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "109"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              58,
              123,
              34,
              108,
              111,
              99,
              97,
              108,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              111,
              107,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              45,
              97,
              100,
              109,
              105,
              110,
              45,
              97,
              112,
              105,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 46,
          "responseSize": 109
        },
        "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
        "assertions": [
          {
            "assertion": "‚úÖ Health check returns 200",
            "skipped": false
          },
          {
            "assertion": "‚úÖ Health check response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "285f9d9e-c425-4d74-91b4-13880e4c9d19",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "65133fb3-2eb2-4cb1-9832-f63e3741208f"
        },
        "item": {
          "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
          "name": "Create Project",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "projects"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Project created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Project response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('project_id', response.id);",
                  "    console.log('üìù Created project ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "projects"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b90f2cea-4ba8-479f-936c-80279973de51",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "153",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "bb0673a7-4b18-482e-8bcd-db5a132b4257",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:15:54 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "185"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              53,
              58,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              54,
              125
            ]
          },
          "cookie": [],
          "responseTime": 29,
          "responseSize": 185
        },
        "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
        "assertions": [
          {
            "assertion": "‚úÖ Project created successfully",
            "skipped": false
          },
          {
            "assertion": "‚úÖ Project response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5ad73596-15d1-4f79-a839-9276259fabc2",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0fb5b2b4-d2e4-4e76-bcfa-a9ffe16eb6d4"
        },
        "item": {
          "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
          "name": "Get Projects",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "projects"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Get projects returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Pagination response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('items');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.expect(response.total).to.be.at.least(1);",
                  "});"
                ],
                "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "projects"
            ],
            "host": [
              "backend"
            ],
            "query": [
              {
                "key": "skip",
                "value": "0"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d803da4a-98d8-429d-8722-6c2820ecbe2b",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "a123455b-29db-4d65-924e-987dbcc1c859",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:15:54 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "1117"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              50,
              57,
              58,
              51,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              51,
              52,
              58,
              49,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              50,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              48,
              56,
              58,
              49,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              51,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              48,
              57,
              58,
              50,
              57,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              52,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              52,
              58,
              53,
              54,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              53,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              53,
              58,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              54,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 1117
        },
        "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
        "assertions": [
          {
            "assertion": "‚úÖ Get projects returns 200",
            "skipped": false
          },
          {
            "assertion": "‚úÖ Pagination response format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "‚úÖ Pagination response format",
              "message": "expected [ { ‚Ä¶(6) }, { ‚Ä¶(6) }, { ‚Ä¶(6) }, ‚Ä¶(3) ] to have property 'items'",
              "stack": "AssertionError: expected [ { ‚Ä¶(6) }, { ‚Ä¶(6) }, { ‚Ä¶(6) }, ‚Ä¶(3) ] to have property 'items'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bad0eb3a-2c9d-4014-badb-97c688825e8c",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0949dbec-50e4-48df-9174-68141b02cc3e"
        },
        "item": {
          "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
          "name": "Create Agent Type",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents",
                "types"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent type created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent type response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('agent_type_id', response.id);",
                  "    console.log('ü§ñ Created agent type ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "agents",
              "types"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2f410d0a-7ce6-4c91-9c7e-362fabfe9c53",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "501",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "be70fadc-be81-40c7-8c9a-f4c78976b7ba",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:15:55 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "21"
            },
            {
              "key": "content-type",
              "value": "text/plain; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              32,
              69,
              114,
              114,
              111,
              114
            ]
          },
          "cookie": [],
          "responseTime": 13,
          "responseSize": 21
        },
        "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
        "assertions": [
          {
            "assertion": "‚úÖ Agent type created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "‚úÖ Agent type created successfully",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "‚úÖ Agent type response format",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "‚úÖ Agent type response format",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e6777bd1-27d1-4a64-a334-33d95f28f493",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "66cb6512-8d73-4b96-a4c5-b1d0adc73c98"
        },
        "item": {
          "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
          "name": "Create Agent",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('agent_type_id');",
                  "    pm.collectionVariables.set('agent_id', response.id);",
                  "    console.log('ü§ñ Created agent ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "agents"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fd4abaf3-cab8-40f2-a8bb-9749763d43ed",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "509",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": ,\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "d7e3b8d8-c01d-4a51-b75d-9cc6e852e66b",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:15:55 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "125"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              52,
              51,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 125
        },
        "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
        "assertions": [
          {
            "assertion": "‚úÖ Agent created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "‚úÖ Agent created successfully",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "‚úÖ Agent response format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "‚úÖ Agent response format",
              "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
              "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "12c06c23-6cec-4e10-aef3-61f88df5f872",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "58f052b1-159c-4763-90a8-5d3a35354bd3"
        },
        "item": {
          "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
          "name": "Create Team",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "teams"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Team created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Team response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('team_id', response.id);",
                  "    console.log('üë• Created team ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "teams"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "45c219e9-431c-4b8b-bca5-c0414ca158a5",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "258",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": 6,\n  \"team_lead_id\": ,\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "1fe6daca-e3d3-4c5d-a0f1-469cb5bc26e6",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:15:56 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "126"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              52,
              49,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 126
        },
        "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
        "assertions": [
          {
            "assertion": "‚úÖ Team created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "‚úÖ Team created successfully",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "‚úÖ Team response format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "‚úÖ Team response format",
              "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
              "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "008cd15b-c6de-40f3-998f-2cfa11c74057",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a38fd09d-6348-44b2-a9f9-e859ab21332c"
        },
        "item": {
          "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('‚ö° Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "workflows"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7d354e43-310d-4e19-aa24-7f8a3641027c",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "1076",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": 6,\n  \"assigned_team_id\": ,\n  \"primary_agent_id\": ,\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "cfcbba8d-8c47-46cf-9f6d-201d7be73fa0",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:15:56 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "126"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              106,
              115,
              111,
              110,
              95,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              49,
              55,
              54,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              74,
              83,
              79,
              78,
              32,
              100,
              101,
              99,
              111,
              100,
              101,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              125,
              44,
              34,
              99,
              116,
              120,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              69,
              120,
              112,
              101,
              99,
              116,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              34,
              125,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 10,
          "responseSize": 126
        },
        "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
        "assertions": [
          {
            "assertion": "‚úÖ Workflow created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "‚úÖ Workflow created successfully",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "‚úÖ Workflow response format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "‚úÖ Workflow response format",
              "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
              "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c6ab1bdc-2bf1-4684-a5fc-f365f6564af8",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f277efd2-6457-434d-8c28-b43cbb32a341"
        },
        "item": {
          "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
          "name": "Get API Documentation",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ API documentation accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                  "});",
                  "",
                  "console.log('üìö FastAPI documentation is available at /docs');"
                ],
                "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "docs"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9a6e22ec-f6ea-4316-9c77-19243b584700",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "4e9f08ba-8e33-41cc-b921-c7f6a50c900b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:15:57 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "950"
            },
            {
              "key": "content-type",
              "value": "text/html; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              10,
              32,
              32,
              32,
              32,
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              108,
              105,
              110,
              107,
              32,
              116,
              121,
              112,
              101,
              61,
              34,
              116,
              101,
              120,
              116,
              47,
              99,
              115,
              115,
              34,
              32,
              114,
              101,
              108,
              61,
              34,
              115,
              116,
              121,
              108,
              101,
              115,
              104,
              101,
              101,
              116,
              34,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              99,
              100,
              110,
              46,
              106,
              115,
              100,
              101,
              108,
              105,
              118,
              114,
              46,
              110,
              101,
              116,
              47,
              110,
              112,
              109,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              100,
              105,
              115,
              116,
              64,
              53,
              46,
              57,
              46,
              48,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              46,
              99,
              115,
              115,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              108,
              105,
              110,
              107,
              32,
              114,
              101,
              108,
              61,
              34,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              32,
              105,
              99,
              111,
              110,
              34,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              102,
              97,
              115,
              116,
              97,
              112,
              105,
              46,
              116,
              105,
              97,
              110,
              103,
              111,
              108,
              111,
              46,
              99,
              111,
              109,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              118,
              105,
              99,
              111,
              110,
              46,
              112,
              110,
              103,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              32,
              65,
              100,
              109,
              105,
              110,
              32,
              65,
              80,
              73,
              32,
              45,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              85,
              73,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              100,
              105,
              118,
              32,
              105,
              100,
              61,
              34,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              100,
              105,
              118,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              115,
              99,
              114,
              105,
              112,
              116,
              32,
              115,
              114,
              99,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              99,
              100,
              110,
              46,
              106,
              115,
              100,
              101,
              108,
              105,
              118,
              114,
              46,
              110,
              101,
              116,
              47,
              110,
              112,
              109,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              100,
              105,
              115,
              116,
              64,
              53,
              46,
              57,
              46,
              48,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              106,
              115,
              34,
              62,
              60,
              47,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              33,
              45,
              45,
              32,
              96,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              96,
              32,
              105,
              115,
              32,
              110,
              111,
              119,
              32,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              103,
              101,
              32,
              45,
              45,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              116,
              32,
              117,
              105,
              32,
              61,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              117,
              114,
              108,
              58,
              32,
              39,
              47,
              111,
              112,
              101,
              110,
              97,
              112,
              105,
              46,
              106,
              115,
              111,
              110,
              39,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              111,
              109,
              95,
              105,
              100,
              34,
              58,
              32,
              34,
              35,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              34,
              44,
              10,
              34,
              108,
              97,
              121,
              111,
              117,
              116,
              34,
              58,
              32,
              34,
              66,
              97,
              115,
              101,
              76,
              97,
              121,
              111,
              117,
              116,
              34,
              44,
              10,
              34,
              100,
              101,
              101,
              112,
              76,
              105,
              110,
              107,
              105,
              110,
              103,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              34,
              115,
              104,
              111,
              119,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              34,
              115,
              104,
              111,
              119,
              67,
              111,
              109,
              109,
              111,
              110,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              111,
              97,
              117,
              116,
              104,
              50,
              82,
              101,
              100,
              105,
              114,
              101,
              99,
              116,
              85,
              114,
              108,
              58,
              32,
              119,
              105,
              110,
              100,
              111,
              119,
              46,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              111,
              114,
              105,
              103,
              105,
              110,
              32,
              43,
              32,
              39,
              47,
              100,
              111,
              99,
              115,
              47,
              111,
              97,
              117,
              116,
              104,
              50,
              45,
              114,
              101,
              100,
              105,
              114,
              101,
              99,
              116,
              39,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              114,
              101,
              115,
              101,
              116,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              112,
              114,
              101,
              115,
              101,
              116,
              115,
              46,
              97,
              112,
              105,
              115,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              83,
              116,
              97,
              110,
              100,
              97,
              108,
              111,
              110,
              101,
              80,
              114,
              101,
              115,
              101,
              116,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              41,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32
            ]
          },
          "cookie": [],
          "responseTime": 11,
          "responseSize": 950
        },
        "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
        "assertions": [
          {
            "assertion": "‚úÖ API documentation accessible",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 2759
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "‚úÖ Pagination response format",
          "message": "expected [ { ‚Ä¶(6) }, { ‚Ä¶(6) }, { ‚Ä¶(6) }, ‚Ä¶(3) ] to have property 'items'",
          "stack": "AssertionError: expected [ { ‚Ä¶(6) }, { ‚Ä¶(6) }, { ‚Ä¶(6) }, ‚Ä¶(3) ] to have property 'items'\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "14bf383e41fb909118cfe3598d50f128",
          "id": "5e254e51-9fa9-47bb-9237-af4c70ce5bc3",
          "timestamp": 1756660555436,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
          "name": "Get Projects",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "projects"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Get projects returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Pagination response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('items');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response.items).to.be.an('array');",
                  "    pm.expect(response.total).to.be.at.least(1);",
                  "});"
                ],
                "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "5ad73596-15d1-4f79-a839-9276259fabc2",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0fb5b2b4-d2e4-4e76-bcfa-a9ffe16eb6d4",
          "scriptId": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
          "execution": "517ae353-0bba-4c39-ad93-e6304f2bf136"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "‚úÖ Agent type created successfully",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "241f387046ee8ddb4bb32e02730d2d99",
          "id": "37b25804-e102-4e37-9082-181ed8b61c22",
          "timestamp": 1756660555984,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
          "name": "Create Agent Type",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents",
                "types"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent type created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent type response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('agent_type_id', response.id);",
                  "    console.log('ü§ñ Created agent type ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "bad0eb3a-2c9d-4014-badb-97c688825e8c",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0949dbec-50e4-48df-9174-68141b02cc3e",
          "scriptId": "456511eb-e15c-4013-9a70-80eaf7f3028c",
          "execution": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "‚úÖ Agent type response format",
          "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
          "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "8c178e5b3521c9d2297760911a9a5266",
          "id": "0be5280a-a045-4109-a0f2-f2312929fe43",
          "timestamp": 1756660555985,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
          "name": "Create Agent Type",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents",
                "types"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent type created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent type response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('agent_type_id', response.id);",
                  "    console.log('ü§ñ Created agent type ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "bad0eb3a-2c9d-4014-badb-97c688825e8c",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0949dbec-50e4-48df-9174-68141b02cc3e",
          "scriptId": "456511eb-e15c-4013-9a70-80eaf7f3028c",
          "execution": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "‚úÖ Agent created successfully",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "dc76a7a7800eb98cd1cca1002f4a5504",
          "id": "00347a56-2352-4093-8267-b5aaa1eb9d3e",
          "timestamp": 1756660556534,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
          "name": "Create Agent",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('agent_type_id');",
                  "    pm.collectionVariables.set('agent_id', response.id);",
                  "    console.log('ü§ñ Created agent ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e6777bd1-27d1-4a64-a334-33d95f28f493",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "66cb6512-8d73-4b96-a4c5-b1d0adc73c98",
          "scriptId": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
          "execution": "62f5c263-cdc1-43c4-bab1-210add67cc11"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "‚úÖ Agent response format",
          "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
          "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "068762cb357563157ac357f05d657e7a",
          "id": "381e3d6c-3b8e-4c41-87b8-fe3889feb20e",
          "timestamp": 1756660556535,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
          "name": "Create Agent",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Agent created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Agent response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('agent_type_id');",
                  "    pm.collectionVariables.set('agent_id', response.id);",
                  "    console.log('ü§ñ Created agent ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e6777bd1-27d1-4a64-a334-33d95f28f493",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "66cb6512-8d73-4b96-a4c5-b1d0adc73c98",
          "scriptId": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
          "execution": "62f5c263-cdc1-43c4-bab1-210add67cc11"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "‚úÖ Team created successfully",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "152fc67592526f7203bf6132e408f46d",
          "id": "2c5a68c1-f072-4ce8-bbfa-d5dcb1b1a074",
          "timestamp": 1756660557089,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
          "name": "Create Team",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "teams"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Team created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Team response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('team_id', response.id);",
                  "    console.log('üë• Created team ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "12c06c23-6cec-4e10-aef3-61f88df5f872",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "58f052b1-159c-4763-90a8-5d3a35354bd3",
          "scriptId": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
          "execution": "9c0681fd-331b-4c84-8d83-59936b5240b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "‚úÖ Team response format",
          "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
          "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "4023ee941d4e3b7948f160840a973202",
          "id": "b29c782b-675f-4b6b-b003-82306ceb76da",
          "timestamp": 1756660557090,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
          "name": "Create Team",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "teams"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Team created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Team response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('team_id', response.id);",
                  "    console.log('üë• Created team ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "12c06c23-6cec-4e10-aef3-61f88df5f872",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "58f052b1-159c-4763-90a8-5d3a35354bd3",
          "scriptId": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
          "execution": "9c0681fd-331b-4c84-8d83-59936b5240b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "‚úÖ Workflow created successfully",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "0ab10182b4beb313f556c28c03e97dec",
          "id": "787eeb2d-92ee-4d39-89cd-43383d64f003",
          "timestamp": 1756660557639,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('‚ö° Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "008cd15b-c6de-40f3-998f-2cfa11c74057",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a38fd09d-6348-44b2-a9f9-e859ab21332c",
          "scriptId": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
          "execution": "12538ca3-bebe-4653-a0c9-9a13323560dd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "‚úÖ Workflow response format",
          "message": "expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'",
          "stack": "AssertionError: expected { detail: [ { ‚Ä¶(5) } ] } to have property 'id'\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "addb4758d88473aba86497ef31f4f07a",
          "id": "0cd08d01-d658-46a1-a04b-0682ec6537bd",
          "timestamp": 1756660557641,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('‚úÖ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('‚úÖ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('‚ö° Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "77081da8-4c32-444b-b7c4-13b360f8dc11",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e0b66225-6692-4417-9f8f-4c0de0a7f4a4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "7a61ae3c-85a0-4e6a-b671-d97446555cfe"
                  }
                }
              ]
            },
            {
              "id": "9fbf90f9-91f6-416d-972a-a2e018b27272",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2da4eca-f4df-4346-8645-0d312e972daa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('üìù Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "85badbf9-2d19-4cec-a9cf-cd2f3b56abd9"
                  }
                }
              ]
            },
            {
              "id": "6ac64932-0fdf-491c-a37a-fd1b8c0d7c27",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e7746c4-a4c4-4ff6-980e-ce28abe0e41f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Pagination response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('items');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response.items).to.be.an('array');",
                      "    pm.expect(response.total).to.be.at.least(1);",
                      "});"
                    ],
                    "_lastExecutionId": "517ae353-0bba-4c39-ad93-e6304f2bf136"
                  }
                }
              ]
            },
            {
              "id": "3499b345-d195-4749-9e22-0e35e1ffe7e5",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Product Owner\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\", \"stakeholder_communication\"],\n    \"tools\": [\"jira\", \"slack\", \"openai\"],\n    \"integrations\": [\"atlassian\", \"slack_api\"]\n  },\n  \"workflow_preferences\": {\n    \"communication_style\": \"collaborative\",\n    \"work_hours\": \"24/7\"\n  },\n  \"default_config\": {\n    \"max_concurrent_projects\": 3,\n    \"response_time_sla\": \"5min\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "456511eb-e15c-4013-9a70-80eaf7f3028c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('ü§ñ Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "1e2d4749-bccc-4911-a273-cb4adcac6a4a"
                  }
                }
              ]
            },
            {
              "id": "ac95061b-7576-4663-afa3-4d6dbcab5662",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"AgentIan\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"configuration\": {\n    \"slack_channel\": \"#agent-team\",\n    \"jira_project\": \"AT\",\n    \"openai_model\": \"gpt-4o-mini\"\n  },\n  \"status\": \"active\",\n  \"workload_capacity\": 100,\n  \"specializations\": {\n    \"domains\": [\"software_development\", \"project_management\"],\n    \"industries\": [\"technology\", \"startup\"]\n  },\n  \"credentials\": {\n    \"jira_token\": \"redacted\",\n    \"slack_token\": \"redacted\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd830632-8b98-45eb-87bc-4b64dd0a9640",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('ü§ñ Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "62f5c263-cdc1-43c4-bab1-210add67cc11"
                  }
                }
              ]
            },
            {
              "id": "887dae53-a531-4123-b5d8-48bbfdd0225e",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Core Development Team\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}},\n  \"configuration\": {\n    \"meeting_schedule\": \"daily_standup\",\n    \"communication_channels\": [\"slack\", \"jira\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "123f0598-3168-4e75-aca3-7a0b0c96ac7a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('üë• Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "9c0681fd-331b-4c84-8d83-59936b5240b2"
                  }
                }
              ]
            },
            {
              "id": "bcd801a7-43ff-4220-a14e-ee971c201f63",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Requirements Gathering Workflow\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"create_stories\",\n        \"type\": \"task\",\n        \"name\": \"Create User Stories\",\n        \"agent_type\": \"product_owner\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"create_stories\"},\n      {\"from\": \"create_stories\", \"to\": \"complete\"}\n    ]\n  },\n  \"agent_requirements\": {\n    \"required_agent_types\": [\"product_owner\"],\n    \"estimated_duration\": \"2-4 hours\"\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('‚úÖ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('‚ö° Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "12538ca3-bebe-4653-a0c9-9a13323560dd"
                  }
                }
              ]
            },
            {
              "id": "90210a55-fedc-41b7-9b11-d2cf1407e2f2",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe724c0-f5c6-4dd2-9402-4e3eb96ad4ca",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('‚úÖ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('üìö FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "1c7bc478-b336-4203-bb6d-639e6bfd28f8"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9955550-bbff-4f8f-842f-e8c9c5d4cfd6",
                "type": "text/javascript",
                "exec": [
                  "console.log('üöÄ FastAPI CRUD Test Suite Starting...');"
                ],
                "_lastExecutionId": "bc22dc07-5f73-4d8f-b99a-e4e79a594d00"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "a43f17e0-5175-458b-a3c7-18a37e0bbd00",
            "name": "FastAPI CRUD Tests",
            "version": {
              "raw": "1.0.0",
              "major": 1,
              "minor": 0,
              "patch": 0,
              "prerelease": [],
              "build": [],
              "string": "1.0.0"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "008cd15b-c6de-40f3-998f-2cfa11c74057",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a38fd09d-6348-44b2-a9f9-e859ab21332c",
          "scriptId": "333fe8e5-e1d7-4033-aa63-5c55a7c1428a",
          "execution": "12538ca3-bebe-4653-a0c9-9a13323560dd"
        }
      }
    ],
    "error": null
  }
}