{
  "collection": {
    "item": [
      {
        "id": "ddf52b96-2440-46df-90a8-91eb9af8b8ae",
        "name": "Health Check",
        "request": {
          "url": {
            "path": [
              "health"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6f754d9a-7d52-4f8f-8867-c570bc57ae21",
              "type": "text/javascript",
              "exec": [
                "pm.test('✅ Health check returns 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('✅ Health check response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('status');",
                "    pm.expect(response).to.have.property('database');",
                "});"
              ],
              "_lastExecutionId": "f6233568-fb2e-4ffe-9df8-209384fd0d0d"
            }
          }
        ]
      },
      {
        "id": "2ead47a5-793d-45a8-a9dc-be9024b1aaeb",
        "name": "Create Project",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "projects",
              ""
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"{{unique_project_name}}\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6e7d95ff-ead0-4275-8aa4-12cf14d8eb50",
              "type": "text/javascript",
              "exec": [
                "pm.test('✅ Project created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('✅ Project response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('project_id', response.id);",
                "    console.log('📝 Created project ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "d0c77b52-4419-4a53-b3ef-71eda5dc9d49"
            }
          }
        ]
      },
      {
        "id": "a273d1cd-e242-4fd2-b535-c6174e0c18fa",
        "name": "Get Projects",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "projects",
              ""
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "skip",
                "value": "0"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "dab24940-cd57-4d3d-8b6a-10713bdaa39c",
              "type": "text/javascript",
              "exec": [
                "pm.test('✅ Get projects returns 200', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('✅ Projects array response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.be.an('array');",
                "    pm.expect(response.length).to.be.at.least(1);",
                "    if (response.length > 0) {",
                "        pm.expect(response[0]).to.have.property('id');",
                "        pm.expect(response[0]).to.have.property('name');",
                "    }",
                "    console.log('📊 Found', response.length, 'projects');",
                "});"
              ],
              "_lastExecutionId": "d973505a-a222-44b4-b495-d47a20b6e4d3"
            }
          }
        ]
      },
      {
        "id": "9003e512-9764-4ab8-8cfa-4ef056dd0089",
        "name": "Create Agent Type",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "agents",
              "types",
              ""
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"{{unique_agent_type_name}}\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\"],\n    \"tools\": [\"jira\", \"slack\"],\n    \"integrations\": [\"atlassian\"]\n  }\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "cc3b1820-00a8-4c15-bad8-e2a557396af8",
              "type": "text/javascript",
              "exec": [
                "pm.test('✅ Agent type created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('✅ Agent type response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('agent_type_id', response.id);",
                "    console.log('🤖 Created agent type ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "04bc0f4f-af67-4142-8488-b3e33cda1df8"
            }
          }
        ]
      },
      {
        "id": "af72aed3-38e5-4611-a0b8-a975f4df2500",
        "name": "Create Agent",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "agents",
              ""
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"{{unique_agent_name}}\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"status\": \"active\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ff8d25ef-8789-4290-b215-a9b1d64e0479",
              "type": "text/javascript",
              "exec": [
                "pm.test('✅ Agent created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('✅ Agent response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.expect(response).to.have.property('agent_type_id');",
                "    pm.collectionVariables.set('agent_id', response.id);",
                "    console.log('🤖 Created agent ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "248920e9-5a2e-4eb4-a28c-c464c2830d54"
            }
          }
        ]
      },
      {
        "id": "311fc9e2-4913-4803-9599-636f95b1aebf",
        "name": "Create Team",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "teams",
              ""
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"{{unique_team_name}}\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}}\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "eddbb063-da7f-4a02-befa-072fd715c6a3",
              "type": "text/javascript",
              "exec": [
                "pm.test('✅ Team created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('✅ Team response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.collectionVariables.set('team_id', response.id);",
                "    console.log('👥 Created team ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "5f5553f4-31f1-455e-b6af-e5752ff58909"
            }
          }
        ]
      },
      {
        "id": "a4282195-2c43-4526-a374-81d820bce376",
        "name": "Create Workflow",
        "request": {
          "url": {
            "path": [
              "api",
              "v1",
              "workflows",
              ""
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "{{content_type}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"{{unique_workflow_name}}\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"complete\"}\n    ]\n  },\n  \"status\": \"active\"\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "170bdec4-0679-4cd4-a054-273f19a6507e",
              "type": "text/javascript",
              "exec": [
                "pm.test('✅ Workflow created successfully', function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('✅ Workflow response format', function () {",
                "    const response = pm.response.json();",
                "    pm.expect(response).to.have.property('id');",
                "    pm.expect(response).to.have.property('name');",
                "    pm.expect(response).to.have.property('definition');",
                "    pm.collectionVariables.set('workflow_id', response.id);",
                "    console.log('⚡ Created workflow ID:', response.id);",
                "});"
              ],
              "_lastExecutionId": "5151722f-afd6-4bf7-bd8b-4feff6e63fff"
            }
          }
        ]
      },
      {
        "id": "3e27ec59-08ee-4da6-9bb9-eaa504699033",
        "name": "Get API Documentation",
        "request": {
          "url": {
            "path": [
              "docs"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "49d3ed24-7d16-4350-b865-f1e361c4f728",
              "type": "text/javascript",
              "exec": [
                "pm.test('✅ API documentation accessible', function () {",
                "    pm.response.to.have.status(200);",
                "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                "});",
                "",
                "console.log('📚 FastAPI documentation is available at /docs');"
              ],
              "_lastExecutionId": "5f03f6a0-39f1-43ed-a56b-c288fc1bddb9"
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "noauth",
      "noauth": []
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "4639279b-7948-4f7a-a6d7-7d9276e5164a",
          "type": "text/javascript",
          "exec": [
            "console.log('🚀 FastAPI CRUD Test Suite Starting...');",
            "// Generate unique names to avoid UNIQUE constraint errors",
            "const timestamp = Date.now();",
            "pm.collectionVariables.set('timestamp', timestamp);",
            "pm.collectionVariables.set('unique_project_name', `Test Project ${timestamp}`);",
            "pm.collectionVariables.set('unique_agent_type_name', `Test Agent Type ${timestamp}`);",
            "pm.collectionVariables.set('unique_agent_name', `Test Agent ${timestamp}`);",
            "pm.collectionVariables.set('unique_team_name', `Test Team ${timestamp}`);",
            "pm.collectionVariables.set('unique_workflow_name', `Test Workflow ${timestamp}`);"
          ],
          "_lastExecutionId": "4816ac45-4d35-47be-a880-f661160d5306"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "project_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "agent_type_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "agent_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "team_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "workflow_id"
      }
    ],
    "info": {
      "_postman_id": "921039f2-0e03-433c-b20e-00863aa5a8ae",
      "name": "FastAPI CRUD Tests - Fixed",
      "version": {
        "raw": "1.0.1",
        "major": 1,
        "minor": 0,
        "patch": 1,
        "prerelease": [],
        "build": [],
        "string": "1.0.1"
      },
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Corrected test suite for Workflow Admin FastAPI CRUD endpoints",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "docker-env",
    "name": "Docker Development",
    "values": [
      {
        "type": "any",
        "value": "http://backend:8000",
        "key": "base_url"
      },
      {
        "type": "any",
        "value": "v1",
        "key": "api_version"
      },
      {
        "type": "any",
        "value": "5000",
        "key": "timeout"
      },
      {
        "type": "any",
        "value": "application/json",
        "key": "content_type"
      },
      {
        "type": "any",
        "value": "",
        "key": "auth_token"
      }
    ]
  },
  "globals": {
    "id": "d43ea1d8-7a60-4b3b-9901-2e6e7211e4c9",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 16,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 15,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 21.875,
      "responseMin": 9,
      "responseMax": 45,
      "responseSd": 10.576359250706266,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756660631358,
      "completed": 1756660635905
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 8,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4cfebc0d-3507-4a09-9aa8-efa4d08d47c1",
          "httpRequestId": "0a658719-ddf3-4160-a200-fb947b0da922"
        },
        "item": {
          "id": "ddf52b96-2440-46df-90a8-91eb9af8b8ae",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "health"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6f754d9a-7d52-4f8f-8867-c570bc57ae21",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Health check response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('database');",
                  "});"
                ],
                "_lastExecutionId": "f6233568-fb2e-4ffe-9df8-209384fd0d0d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "health"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "60163463-0837-4ce3-ba5e-eda3b7baaecb",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "9c5a64b6-3c6b-47f0-8ddc-fa931d8e3f32",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:17:11 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "109"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              104,
              101,
              97,
              108,
              116,
              104,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              34,
              58,
              123,
              34,
              108,
              111,
              99,
              97,
              108,
              95,
              99,
              111,
              110,
              110,
              101,
              99,
              116,
              105,
              111,
              110,
              95,
              111,
              107,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              34,
              58,
              34,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              45,
              97,
              100,
              109,
              105,
              110,
              45,
              97,
              112,
              105,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 45,
          "responseSize": 109
        },
        "id": "ddf52b96-2440-46df-90a8-91eb9af8b8ae",
        "assertions": [
          {
            "assertion": "✅ Health check returns 200",
            "skipped": false
          },
          {
            "assertion": "✅ Health check response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "08fd061e-2a9f-4b4d-bb80-82ffac91d091",
          "length": 8,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "db9f9b33-6c53-4889-a576-8061776bdb77"
        },
        "item": {
          "id": "2ead47a5-793d-45a8-a9dc-be9024b1aaeb",
          "name": "Create Project",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "projects",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{unique_project_name}}\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6e7d95ff-ead0-4275-8aa4-12cf14d8eb50",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Project created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Project response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('project_id', response.id);",
                  "    console.log('📝 Created project ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "d0c77b52-4419-4a53-b3ef-71eda5dc9d49"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "projects",
              ""
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "930ac619-49b0-490a-ae8e-0c0599c190e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "167",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Project 1756660632499\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "69a464d1-ceb9-453a-bc7a-b7667ed03f29",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:17:11 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "199"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              55,
              58,
              49,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              49,
              55,
              53,
              54,
              54,
              54,
              48,
              54,
              51,
              50,
              52,
              57,
              57,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              55,
              125
            ]
          },
          "cookie": [],
          "responseTime": 30,
          "responseSize": 199
        },
        "id": "2ead47a5-793d-45a8-a9dc-be9024b1aaeb",
        "assertions": [
          {
            "assertion": "✅ Project created successfully",
            "skipped": false
          },
          {
            "assertion": "✅ Project response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e10e3aab-0b62-476c-a169-14aa50bd7ecf",
          "length": 8,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e97bbafc-e7e8-42b9-8f1f-83ccc88de788"
        },
        "item": {
          "id": "a273d1cd-e242-4fd2-b535-c6174e0c18fa",
          "name": "Get Projects",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "projects",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dab24940-cd57-4d3d-8b6a-10713bdaa39c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Get projects returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Projects array response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response.length).to.be.at.least(1);",
                  "    if (response.length > 0) {",
                  "        pm.expect(response[0]).to.have.property('id');",
                  "        pm.expect(response[0]).to.have.property('name');",
                  "    }",
                  "    console.log('📊 Found', response.length, 'projects');",
                  "});"
                ],
                "_lastExecutionId": "d973505a-a222-44b4-b495-d47a20b6e4d3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "projects",
              ""
            ],
            "host": [
              "backend"
            ],
            "query": [
              {
                "key": "skip",
                "value": "0"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "654aad19-1895-4687-924b-781a22a18267",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "a05be6e0-aaad-4621-a796-579b151c440c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:17:12 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "1317"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              50,
              57,
              58,
              51,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              51,
              52,
              58,
              49,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              50,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              48,
              56,
              58,
              49,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              51,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              48,
              57,
              58,
              50,
              57,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              52,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              52,
              58,
              53,
              54,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              53,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              53,
              58,
              53,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              54,
              125,
              44,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              55,
              58,
              49,
              50,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              49,
              55,
              53,
              54,
              54,
              54,
              48,
              54,
              51,
              50,
              52,
              57,
              57,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              32,
              116,
              101,
              115,
              116,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              112,
              114,
              105,
              111,
              114,
              105,
              116,
              121,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              34,
              125,
              44,
              34,
              105,
              100,
              34,
              58,
              55,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 12,
          "responseSize": 1317
        },
        "id": "a273d1cd-e242-4fd2-b535-c6174e0c18fa",
        "assertions": [
          {
            "assertion": "✅ Get projects returns 200",
            "skipped": false
          },
          {
            "assertion": "✅ Projects array response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "014dfccd-af4c-4e81-bc62-05d355c1aaff",
          "length": 8,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b98a57cf-ffd6-4de2-971e-041a08013f81"
        },
        "item": {
          "id": "9003e512-9764-4ab8-8cfa-4ef056dd0089",
          "name": "Create Agent Type",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents",
                "types",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{unique_agent_type_name}}\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\"],\n    \"tools\": [\"jira\", \"slack\"],\n    \"integrations\": [\"atlassian\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc3b1820-00a8-4c15-bad8-e2a557396af8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Agent type created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Agent type response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('agent_type_id', response.id);",
                  "    console.log('🤖 Created agent type ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "04bc0f4f-af67-4142-8488-b3e33cda1df8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "agents",
              "types",
              ""
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "01b30f4e-0067-4dfa-9aec-abef80a2b17a",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "270",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Agent Type 1756660633620\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\"],\n    \"tools\": [\"jira\", \"slack\"],\n    \"integrations\": [\"atlassian\"]\n  }\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "923edb66-cfe6-4129-9987-de107635e822",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:17:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "361"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              55,
              58,
              49,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              103,
              101,
              110,
              116,
              32,
              84,
              121,
              112,
              101,
              32,
              49,
              55,
              53,
              54,
              54,
              54,
              48,
              54,
              51,
              51,
              54,
              50,
              48,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              73,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              79,
              119,
              110,
              101,
              114,
              32,
              97,
              103,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              109,
              101,
              110,
              116,
              115,
              32,
              103,
              97,
              116,
              104,
              101,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              99,
              97,
              112,
              97,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              115,
              107,
              105,
              108,
              108,
              115,
              34,
              58,
              91,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              109,
              101,
              110,
              116,
              115,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              115,
              116,
              111,
              114,
              121,
              95,
              99,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              34,
              93,
              44,
              34,
              116,
              111,
              111,
              108,
              115,
              34,
              58,
              91,
              34,
              106,
              105,
              114,
              97,
              34,
              44,
              34,
              115,
              108,
              97,
              99,
              107,
              34,
              93,
              44,
              34,
              105,
              110,
              116,
              101,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              34,
              97,
              116,
              108,
              97,
              115,
              115,
              105,
              97,
              110,
              34,
              93,
              125,
              44,
              34,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              105,
              115,
              95,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 21,
          "responseSize": 361
        },
        "id": "9003e512-9764-4ab8-8cfa-4ef056dd0089",
        "assertions": [
          {
            "assertion": "✅ Agent type created successfully",
            "skipped": false
          },
          {
            "assertion": "✅ Agent type response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "877da6a0-09fc-4aa7-8cf0-459575b6c4a9",
          "length": 8,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b61343eb-545e-45e6-a510-12fb35d4df87"
        },
        "item": {
          "id": "af72aed3-38e5-4611-a0b8-a975f4df2500",
          "name": "Create Agent",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "agents",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{unique_agent_name}}\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff8d25ef-8789-4290-b215-a9b1d64e0479",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Agent created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Agent response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('agent_type_id');",
                  "    pm.collectionVariables.set('agent_id', response.id);",
                  "    console.log('🤖 Created agent ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "248920e9-5a2e-4eb4-a28c-c464c2830d54"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "agents",
              ""
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "371a39f8-1b86-4078-9ad6-e5bc187c16ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "157",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Agent 1756660634186\",\n  \"agent_type_id\": 3,\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"status\": \"active\"\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "3b558175-5e95-4e4c-8498-cd33b4172fb0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:17:13 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "710"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              55,
              58,
              49,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              103,
              101,
              110,
              116,
              32,
              49,
              55,
              53,
              54,
              54,
              54,
              48,
              54,
              51,
              52,
              49,
              56,
              54,
              34,
              44,
              34,
              97,
              103,
              101,
              110,
              116,
              95,
              116,
              121,
              112,
              101,
              95,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              79,
              119,
              110,
              101,
              114,
              32,
              97,
              103,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              109,
              101,
              110,
              116,
              115,
              34,
              44,
              34,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              44,
              34,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              95,
              99,
              97,
              112,
              97,
              99,
              105,
              116,
              121,
              34,
              58,
              49,
              48,
              48,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              95,
              119,
              111,
              114,
              107,
              108,
              111,
              97,
              100,
              34,
              58,
              48,
              44,
              34,
              115,
              112,
              101,
              99,
              105,
              97,
              108,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              97,
              103,
              101,
              110,
              116,
              95,
              116,
              121,
              112,
              101,
              34,
              58,
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              55,
              58,
              49,
              51,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              65,
              103,
              101,
              110,
              116,
              32,
              84,
              121,
              112,
              101,
              32,
              49,
              55,
              53,
              54,
              54,
              54,
              48,
              54,
              51,
              51,
              54,
              50,
              48,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              73,
              32,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              79,
              119,
              110,
              101,
              114,
              32,
              97,
              103,
              101,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              109,
              101,
              110,
              116,
              115,
              32,
              103,
              97,
              116,
              104,
              101,
              114,
              105,
              110,
              103,
              34,
              44,
              34,
              99,
              97,
              112,
              97,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              115,
              107,
              105,
              108,
              108,
              115,
              34,
              58,
              91,
              34,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              109,
              101,
              110,
              116,
              115,
              95,
              97,
              110,
              97,
              108,
              121,
              115,
              105,
              115,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              115,
              116,
              111,
              114,
              121,
              95,
              99,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              34,
              93,
              44,
              34,
              116,
              111,
              111,
              108,
              115,
              34,
              58,
              91,
              34,
              106,
              105,
              114,
              97,
              34,
              44,
              34,
              115,
              108,
              97,
              99,
              107,
              34,
              93,
              44,
              34,
              105,
              110,
              116,
              101,
              103,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              58,
              91,
              34,
              97,
              116,
              108,
              97,
              115,
              115,
              105,
              97,
              110,
              34,
              93,
              125,
              44,
              34,
              119,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              95,
              112,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              105,
              115,
              95,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              95,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 710
        },
        "id": "af72aed3-38e5-4611-a0b8-a975f4df2500",
        "assertions": [
          {
            "assertion": "✅ Agent created successfully",
            "skipped": false
          },
          {
            "assertion": "✅ Agent response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "eab82e59-8a5c-4bbd-a120-ee9764cef82f",
          "length": 8,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "15597754-48dd-4a1c-ae24-99fd5d623470"
        },
        "item": {
          "id": "311fc9e2-4913-4803-9599-636f95b1aebf",
          "name": "Create Team",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "teams",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{unique_team_name}}\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}}\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eddbb063-da7f-4a02-befa-072fd715c6a3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Team created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Team response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.collectionVariables.set('team_id', response.id);",
                  "    console.log('👥 Created team ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "5f5553f4-31f1-455e-b6af-e5752ff58909"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "teams",
              ""
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "afe2fb69-f061-4c7d-a319-9451feb1f117",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "146",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Team 1756660634743\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": 7,\n  \"team_lead_id\": 3\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "78a9ca23-5f07-4c23-9790-849860c89d87",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:17:14 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "227"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              51,
              49,
              84,
              49,
              55,
              58,
              49,
              55,
              58,
              49,
              52,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              84,
              101,
              97,
              109,
              32,
              49,
              55,
              53,
              54,
              54,
              54,
              48,
              54,
              51,
              52,
              55,
              52,
              51,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              100,
              101,
              118,
              101,
              108,
              111,
              112,
              109,
              101,
              110,
              116,
              32,
              116,
              101,
              97,
              109,
              32,
              102,
              111,
              114,
              32,
              65,
              103,
              101,
              110,
              116,
              84,
              101,
              97,
              109,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              34,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              34,
              58,
              55,
              44,
              34,
              116,
              101,
              97,
              109,
              95,
              108,
              101,
              97,
              100,
              95,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              105,
              115,
              95,
              97,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 22,
          "responseSize": 227
        },
        "id": "311fc9e2-4913-4803-9599-636f95b1aebf",
        "assertions": [
          {
            "assertion": "✅ Team created successfully",
            "skipped": false
          },
          {
            "assertion": "✅ Team response format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "936a6e3b-b256-44e1-b07a-90c13d7d612c",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54ae474f-24bf-4402-8dd6-6b5c31a1cddf"
        },
        "item": {
          "id": "a4282195-2c43-4526-a374-81d820bce376",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{unique_workflow_name}}\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"complete\"}\n    ]\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "170bdec4-0679-4cd4-a054-273f19a6507e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('⚡ Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "5151722f-afd6-4bf7-bd8b-4feff6e63fff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v1",
              "workflows",
              ""
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "226ff7f6-5510-4102-b9ef-b9434bd29ae8",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "711",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Workflow 1756660635302\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": 7,\n  \"assigned_team_id\": 2,\n  \"primary_agent_id\": 3,\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"complete\"}\n    ]\n  },\n  \"status\": \"active\"\n}"
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "6c6feac7-96dd-4555-bac9-64162de2542b",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:17:14 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "21"
            },
            {
              "key": "content-type",
              "value": "text/plain; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              73,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              32,
              69,
              114,
              114,
              111,
              114
            ]
          },
          "cookie": [],
          "responseTime": 18,
          "responseSize": 21
        },
        "id": "a4282195-2c43-4526-a374-81d820bce376",
        "assertions": [
          {
            "assertion": "✅ Workflow created successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "✅ Workflow created successfully",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "✅ Workflow response format",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "✅ Workflow response format",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3bd02fa7-6bd1-487c-8fb9-a081f1d5aa5b",
          "length": 8,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ea2a1db0-b6e4-45b8-9cb2-52aa372f3eeb"
        },
        "item": {
          "id": "3e27ec59-08ee-4da6-9bb9-eaa504699033",
          "name": "Get API Documentation",
          "request": {
            "url": {
              "path": [
                "docs"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "49d3ed24-7d16-4350-b865-f1e361c4f728",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ API documentation accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                  "});",
                  "",
                  "console.log('📚 FastAPI documentation is available at /docs');"
                ],
                "_lastExecutionId": "5f03f6a0-39f1-43ed-a56b-c288fc1bddb9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "docs"
            ],
            "host": [
              "backend"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "068752f2-80eb-4a49-9ba6-bdc445a62d2a",
              "system": true
            },
            {
              "key": "Host",
              "value": "backend:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "c0a6bd82-7c79-4378-971d-22bde29a0763",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Sun, 31 Aug 2025 17:17:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "950"
            },
            {
              "key": "content-type",
              "value": "text/html; charset=utf-8"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              10,
              32,
              32,
              32,
              32,
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              108,
              105,
              110,
              107,
              32,
              116,
              121,
              112,
              101,
              61,
              34,
              116,
              101,
              120,
              116,
              47,
              99,
              115,
              115,
              34,
              32,
              114,
              101,
              108,
              61,
              34,
              115,
              116,
              121,
              108,
              101,
              115,
              104,
              101,
              101,
              116,
              34,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              99,
              100,
              110,
              46,
              106,
              115,
              100,
              101,
              108,
              105,
              118,
              114,
              46,
              110,
              101,
              116,
              47,
              110,
              112,
              109,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              100,
              105,
              115,
              116,
              64,
              53,
              46,
              57,
              46,
              48,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              46,
              99,
              115,
              115,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              108,
              105,
              110,
              107,
              32,
              114,
              101,
              108,
              61,
              34,
              115,
              104,
              111,
              114,
              116,
              99,
              117,
              116,
              32,
              105,
              99,
              111,
              110,
              34,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              102,
              97,
              115,
              116,
              97,
              112,
              105,
              46,
              116,
              105,
              97,
              110,
              103,
              111,
              108,
              111,
              46,
              99,
              111,
              109,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              118,
              105,
              99,
              111,
              110,
              46,
              112,
              110,
              103,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              87,
              111,
              114,
              107,
              102,
              108,
              111,
              119,
              32,
              65,
              100,
              109,
              105,
              110,
              32,
              65,
              80,
              73,
              32,
              45,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              32,
              85,
              73,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              100,
              105,
              118,
              32,
              105,
              100,
              61,
              34,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              100,
              105,
              118,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              115,
              99,
              114,
              105,
              112,
              116,
              32,
              115,
              114,
              99,
              61,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              99,
              100,
              110,
              46,
              106,
              115,
              100,
              101,
              108,
              105,
              118,
              114,
              46,
              110,
              101,
              116,
              47,
              110,
              112,
              109,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              100,
              105,
              115,
              116,
              64,
              53,
              46,
              57,
              46,
              48,
              47,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              45,
              98,
              117,
              110,
              100,
              108,
              101,
              46,
              106,
              115,
              34,
              62,
              60,
              47,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              33,
              45,
              45,
              32,
              96,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              96,
              32,
              105,
              115,
              32,
              110,
              111,
              119,
              32,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              103,
              101,
              32,
              45,
              45,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              99,
              111,
              110,
              115,
              116,
              32,
              117,
              105,
              32,
              61,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              40,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              117,
              114,
              108,
              58,
              32,
              39,
              47,
              111,
              112,
              101,
              110,
              97,
              112,
              105,
              46,
              106,
              115,
              111,
              110,
              39,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              100,
              111,
              109,
              95,
              105,
              100,
              34,
              58,
              32,
              34,
              35,
              115,
              119,
              97,
              103,
              103,
              101,
              114,
              45,
              117,
              105,
              34,
              44,
              10,
              34,
              108,
              97,
              121,
              111,
              117,
              116,
              34,
              58,
              32,
              34,
              66,
              97,
              115,
              101,
              76,
              97,
              121,
              111,
              117,
              116,
              34,
              44,
              10,
              34,
              100,
              101,
              101,
              112,
              76,
              105,
              110,
              107,
              105,
              110,
              103,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              34,
              115,
              104,
              111,
              119,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              34,
              115,
              104,
              111,
              119,
              67,
              111,
              109,
              109,
              111,
              110,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              115,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              111,
              97,
              117,
              116,
              104,
              50,
              82,
              101,
              100,
              105,
              114,
              101,
              99,
              116,
              85,
              114,
              108,
              58,
              32,
              119,
              105,
              110,
              100,
              111,
              119,
              46,
              108,
              111,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              111,
              114,
              105,
              103,
              105,
              110,
              32,
              43,
              32,
              39,
              47,
              100,
              111,
              99,
              115,
              47,
              111,
              97,
              117,
              116,
              104,
              50,
              45,
              114,
              101,
              100,
              105,
              114,
              101,
              99,
              116,
              39,
              44,
              10,
              32,
              32,
              32,
              32,
              112,
              114,
              101,
              115,
              101,
              116,
              115,
              58,
              32,
              91,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              112,
              114,
              101,
              115,
              101,
              116,
              115,
              46,
              97,
              112,
              105,
              115,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              66,
              117,
              110,
              100,
              108,
              101,
              46,
              83,
              119,
              97,
              103,
              103,
              101,
              114,
              85,
              73,
              83,
              116,
              97,
              110,
              100,
              97,
              108,
              111,
              110,
              101,
              80,
              114,
              101,
              115,
              101,
              116,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              93,
              44,
              10,
              32,
              32,
              32,
              32,
              125,
              41,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              115,
              99,
              114,
              105,
              112,
              116,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 950
        },
        "id": "3e27ec59-08ee-4da6-9bb9-eaa504699033",
        "assertions": [
          {
            "assertion": "✅ API documentation accessible",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 3894
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "✅ Workflow created successfully",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "e7cb1bdb148b49e2ac3f3eb844c3502c",
          "id": "23fa8db8-0f5e-415f-9e4b-fcd71a82768e",
          "timestamp": 1756660635342,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a4282195-2c43-4526-a374-81d820bce376",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{unique_workflow_name}}\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"complete\"}\n    ]\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "170bdec4-0679-4cd4-a054-273f19a6507e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('⚡ Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "5151722f-afd6-4bf7-bd8b-4feff6e63fff"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "ddf52b96-2440-46df-90a8-91eb9af8b8ae",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f754d9a-7d52-4f8f-8867-c570bc57ae21",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "f6233568-fb2e-4ffe-9df8-209384fd0d0d"
                  }
                }
              ]
            },
            {
              "id": "2ead47a5-793d-45a8-a9dc-be9024b1aaeb",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_project_name}}\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6e7d95ff-ead0-4275-8aa4-12cf14d8eb50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('📝 Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "d0c77b52-4419-4a53-b3ef-71eda5dc9d49"
                  }
                }
              ]
            },
            {
              "id": "a273d1cd-e242-4fd2-b535-c6174e0c18fa",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dab24940-cd57-4d3d-8b6a-10713bdaa39c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Projects array response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.at.least(1);",
                      "    if (response.length > 0) {",
                      "        pm.expect(response[0]).to.have.property('id');",
                      "        pm.expect(response[0]).to.have.property('name');",
                      "    }",
                      "    console.log('📊 Found', response.length, 'projects');",
                      "});"
                    ],
                    "_lastExecutionId": "d973505a-a222-44b4-b495-d47a20b6e4d3"
                  }
                }
              ]
            },
            {
              "id": "9003e512-9764-4ab8-8cfa-4ef056dd0089",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_agent_type_name}}\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\"],\n    \"tools\": [\"jira\", \"slack\"],\n    \"integrations\": [\"atlassian\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc3b1820-00a8-4c15-bad8-e2a557396af8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('🤖 Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "04bc0f4f-af67-4142-8488-b3e33cda1df8"
                  }
                }
              ]
            },
            {
              "id": "af72aed3-38e5-4611-a0b8-a975f4df2500",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_agent_name}}\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff8d25ef-8789-4290-b215-a9b1d64e0479",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('🤖 Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "248920e9-5a2e-4eb4-a28c-c464c2830d54"
                  }
                }
              ]
            },
            {
              "id": "311fc9e2-4913-4803-9599-636f95b1aebf",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_team_name}}\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}}\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eddbb063-da7f-4a02-befa-072fd715c6a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('👥 Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "5f5553f4-31f1-455e-b6af-e5752ff58909"
                  }
                }
              ]
            },
            {
              "id": "a4282195-2c43-4526-a374-81d820bce376",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_workflow_name}}\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"complete\"}\n    ]\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "170bdec4-0679-4cd4-a054-273f19a6507e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('⚡ Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "5151722f-afd6-4bf7-bd8b-4feff6e63fff"
                  }
                }
              ]
            },
            {
              "id": "3e27ec59-08ee-4da6-9bb9-eaa504699033",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "49d3ed24-7d16-4350-b865-f1e361c4f728",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('📚 FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "5f03f6a0-39f1-43ed-a56b-c288fc1bddb9"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4639279b-7948-4f7a-a6d7-7d9276e5164a",
                "type": "text/javascript",
                "exec": [
                  "console.log('🚀 FastAPI CRUD Test Suite Starting...');",
                  "// Generate unique names to avoid UNIQUE constraint errors",
                  "const timestamp = Date.now();",
                  "pm.collectionVariables.set('timestamp', timestamp);",
                  "pm.collectionVariables.set('unique_project_name', `Test Project ${timestamp}`);",
                  "pm.collectionVariables.set('unique_agent_type_name', `Test Agent Type ${timestamp}`);",
                  "pm.collectionVariables.set('unique_agent_name', `Test Agent ${timestamp}`);",
                  "pm.collectionVariables.set('unique_team_name', `Test Team ${timestamp}`);",
                  "pm.collectionVariables.set('unique_workflow_name', `Test Workflow ${timestamp}`);"
                ],
                "_lastExecutionId": "4816ac45-4d35-47be-a880-f661160d5306"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "921039f2-0e03-433c-b20e-00863aa5a8ae",
            "name": "FastAPI CRUD Tests - Fixed",
            "version": {
              "raw": "1.0.1",
              "major": 1,
              "minor": 0,
              "patch": 1,
              "prerelease": [],
              "build": [],
              "string": "1.0.1"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Corrected test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "936a6e3b-b256-44e1-b07a-90c13d7d612c",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54ae474f-24bf-4402-8dd6-6b5c31a1cddf",
          "scriptId": "170bdec4-0679-4cd4-a054-273f19a6507e",
          "execution": "5151722f-afd6-4bf7-bd8b-4feff6e63fff"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "✅ Workflow response format",
          "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
          "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "3c7c363a87e2c903a920f78d48da3634",
          "id": "e0f45afb-3185-41fd-9cb6-3c3ad9c042f9",
          "timestamp": 1756660635351,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a4282195-2c43-4526-a374-81d820bce376",
          "name": "Create Workflow",
          "request": {
            "url": {
              "path": [
                "api",
                "v1",
                "workflows",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "{{content_type}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{unique_workflow_name}}\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"complete\"}\n    ]\n  },\n  \"status\": \"active\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "170bdec4-0679-4cd4-a054-273f19a6507e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('✅ Workflow created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('✅ Workflow response format', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('definition');",
                  "    pm.collectionVariables.set('workflow_id', response.id);",
                  "    console.log('⚡ Created workflow ID:', response.id);",
                  "});"
                ],
                "_lastExecutionId": "5151722f-afd6-4bf7-bd8b-4feff6e63fff"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "ddf52b96-2440-46df-90a8-91eb9af8b8ae",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "health"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f754d9a-7d52-4f8f-8867-c570bc57ae21",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Health check returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Health check response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('database');",
                      "});"
                    ],
                    "_lastExecutionId": "f6233568-fb2e-4ffe-9df8-209384fd0d0d"
                  }
                }
              ]
            },
            {
              "id": "2ead47a5-793d-45a8-a9dc-be9024b1aaeb",
              "name": "Create Project",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_project_name}}\",\n  \"description\": \"A test project for API validation\",\n  \"settings\": {\n    \"priority\": \"high\",\n    \"category\": \"testing\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6e7d95ff-ead0-4275-8aa4-12cf14d8eb50",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Project created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Project response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('project_id', response.id);",
                      "    console.log('📝 Created project ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "d0c77b52-4419-4a53-b3ef-71eda5dc9d49"
                  }
                }
              ]
            },
            {
              "id": "a273d1cd-e242-4fd2-b535-c6174e0c18fa",
              "name": "Get Projects",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "projects",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "skip",
                      "value": "0"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dab24940-cd57-4d3d-8b6a-10713bdaa39c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Get projects returns 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Projects array response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "    pm.expect(response.length).to.be.at.least(1);",
                      "    if (response.length > 0) {",
                      "        pm.expect(response[0]).to.have.property('id');",
                      "        pm.expect(response[0]).to.have.property('name');",
                      "    }",
                      "    console.log('📊 Found', response.length, 'projects');",
                      "});"
                    ],
                    "_lastExecutionId": "d973505a-a222-44b4-b495-d47a20b6e4d3"
                  }
                }
              ]
            },
            {
              "id": "9003e512-9764-4ab8-8cfa-4ef056dd0089",
              "name": "Create Agent Type",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    "types",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_agent_type_name}}\",\n  \"description\": \"AI Product Owner agent for requirements gathering\",\n  \"capabilities\": {\n    \"skills\": [\"requirements_analysis\", \"user_story_creation\"],\n    \"tools\": [\"jira\", \"slack\"],\n    \"integrations\": [\"atlassian\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc3b1820-00a8-4c15-bad8-e2a557396af8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Agent type created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Agent type response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('agent_type_id', response.id);",
                      "    console.log('🤖 Created agent type ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "04bc0f4f-af67-4142-8488-b3e33cda1df8"
                  }
                }
              ]
            },
            {
              "id": "af72aed3-38e5-4611-a0b8-a975f4df2500",
              "name": "Create Agent",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "agents",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_agent_name}}\",\n  \"agent_type_id\": {{agent_type_id}},\n  \"description\": \"Primary Product Owner agent for project requirements\",\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff8d25ef-8789-4290-b215-a9b1d64e0479",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Agent created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Agent response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('agent_type_id');",
                      "    pm.collectionVariables.set('agent_id', response.id);",
                      "    console.log('🤖 Created agent ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "248920e9-5a2e-4eb4-a28c-c464c2830d54"
                  }
                }
              ]
            },
            {
              "id": "311fc9e2-4913-4803-9599-636f95b1aebf",
              "name": "Create Team",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "teams",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_team_name}}\",\n  \"description\": \"Primary development team for AgentTeam project\",\n  \"project_id\": {{project_id}},\n  \"team_lead_id\": {{agent_id}}\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eddbb063-da7f-4a02-befa-072fd715c6a3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Team created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Team response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.collectionVariables.set('team_id', response.id);",
                      "    console.log('👥 Created team ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "5f5553f4-31f1-455e-b6af-e5752ff58909"
                  }
                }
              ]
            },
            {
              "id": "a4282195-2c43-4526-a374-81d820bce376",
              "name": "Create Workflow",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v1",
                    "workflows",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "{{content_type}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"{{unique_workflow_name}}\",\n  \"description\": \"Standard workflow for gathering and processing project requirements\",\n  \"project_id\": {{project_id}},\n  \"assigned_team_id\": {{team_id}},\n  \"primary_agent_id\": {{agent_id}},\n  \"definition\": {\n    \"nodes\": [\n      {\n        \"id\": \"start\",\n        \"type\": \"start\",\n        \"name\": \"Requirements Gathering Start\"\n      },\n      {\n        \"id\": \"analyze_goal\",\n        \"type\": \"task\",\n        \"name\": \"Analyze Project Goal\"\n      },\n      {\n        \"id\": \"complete\",\n        \"type\": \"end\",\n        \"name\": \"Requirements Complete\"\n      }\n    ],\n    \"edges\": [\n      {\"from\": \"start\", \"to\": \"analyze_goal\"},\n      {\"from\": \"analyze_goal\", \"to\": \"complete\"}\n    ]\n  },\n  \"status\": \"active\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "170bdec4-0679-4cd4-a054-273f19a6507e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ Workflow created successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('✅ Workflow response format', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('definition');",
                      "    pm.collectionVariables.set('workflow_id', response.id);",
                      "    console.log('⚡ Created workflow ID:', response.id);",
                      "});"
                    ],
                    "_lastExecutionId": "5151722f-afd6-4bf7-bd8b-4feff6e63fff"
                  }
                }
              ]
            },
            {
              "id": "3e27ec59-08ee-4da6-9bb9-eaa504699033",
              "name": "Get API Documentation",
              "request": {
                "url": {
                  "path": [
                    "docs"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "49d3ed24-7d16-4350-b865-f1e361c4f728",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('✅ API documentation accessible', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.headers.get('content-type')).to.include('text/html');",
                      "});",
                      "",
                      "console.log('📚 FastAPI documentation is available at /docs');"
                    ],
                    "_lastExecutionId": "5f03f6a0-39f1-43ed-a56b-c288fc1bddb9"
                  }
                }
              ]
            }
          ],
          "auth": {
            "type": "noauth",
            "noauth": []
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4639279b-7948-4f7a-a6d7-7d9276e5164a",
                "type": "text/javascript",
                "exec": [
                  "console.log('🚀 FastAPI CRUD Test Suite Starting...');",
                  "// Generate unique names to avoid UNIQUE constraint errors",
                  "const timestamp = Date.now();",
                  "pm.collectionVariables.set('timestamp', timestamp);",
                  "pm.collectionVariables.set('unique_project_name', `Test Project ${timestamp}`);",
                  "pm.collectionVariables.set('unique_agent_type_name', `Test Agent Type ${timestamp}`);",
                  "pm.collectionVariables.set('unique_agent_name', `Test Agent ${timestamp}`);",
                  "pm.collectionVariables.set('unique_team_name', `Test Team ${timestamp}`);",
                  "pm.collectionVariables.set('unique_workflow_name', `Test Workflow ${timestamp}`);"
                ],
                "_lastExecutionId": "4816ac45-4d35-47be-a880-f661160d5306"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "project_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_type_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "agent_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "team_id"
            },
            {
              "type": "any",
              "value": "",
              "key": "workflow_id"
            }
          ],
          "info": {
            "_postman_id": "921039f2-0e03-433c-b20e-00863aa5a8ae",
            "name": "FastAPI CRUD Tests - Fixed",
            "version": {
              "raw": "1.0.1",
              "major": 1,
              "minor": 0,
              "patch": 1,
              "prerelease": [],
              "build": [],
              "string": "1.0.1"
            },
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Corrected test suite for Workflow Admin FastAPI CRUD endpoints",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "936a6e3b-b256-44e1-b07a-90c13d7d612c",
          "length": 8,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54ae474f-24bf-4402-8dd6-6b5c31a1cddf",
          "scriptId": "170bdec4-0679-4cd4-a054-273f19a6507e",
          "execution": "5151722f-afd6-4bf7-bd8b-4feff6e63fff"
        }
      }
    ],
    "error": null
  }
}